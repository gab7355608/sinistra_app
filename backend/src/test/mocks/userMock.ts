import { faker } from '@faker-js/faker';
import { User } from '@prisma/client';
import { Role } from '@shared/types/userType';
import { v4 as uuidv4 } from 'uuid';

export const userMock: User[] = [
    {
        id: uuidv4(),
        email: faker.internet.email(),
        password: faker.internet.password(),
        firstName: faker.person.firstName(),
        lastName: faker.person.lastName(),
        phone: faker.phone.number(),
        civility: faker.person.gender(),
        birthDate: faker.date.birthdate().toISOString(),
        acceptNewsletter: true,
        roles: JSON.stringify([Role.User]),
    },
    {
        id: uuidv4(),
        email: faker.internet.email(),
        password: faker.internet.password(),
        firstName: faker.person.firstName(),
        lastName: faker.person.lastName(),
        phone: faker.phone.number(),
        civility: faker.person.gender(),
        birthDate: faker.date.birthdate().toISOString(),
        acceptNewsletter: true,
        roles: JSON.stringify([Role.User]),
    },
    {
        id: uuidv4(),
        email: faker.internet.email(),
        password: faker.internet.password(),
        firstName: faker.person.firstName(),
        lastName: faker.person.lastName(),
        phone: faker.phone.number(),
        civility: faker.person.gender(),
        birthDate: faker.date.birthdate().toISOString(),
        acceptNewsletter: true,
        roles: JSON.stringify([Role.User]),
    },
    {
        id: uuidv4(),
        email: faker.internet.email(),
        password: faker.internet.password(),
        firstName: faker.person.firstName(),
        lastName: faker.person.lastName(),
        phone: faker.phone.number(),
        civility: faker.person.gender(),
        birthDate: faker.date.birthdate().toISOString(),
        acceptNewsletter: true,
        roles: JSON.stringify([Role.User]),
    },
    {
        id: uuidv4(),
        email: faker.internet.email(),
        password: faker.internet.password(),
        firstName: faker.person.firstName(),
        lastName: faker.person.lastName(),
        phone: faker.phone.number(),
        civility: faker.person.gender(),
        birthDate: faker.date.birthdate().toISOString(),
        acceptNewsletter: true,
        roles: JSON.stringify([Role.User]),
    },
    {
        id: uuidv4(),
        email: 'admin@nexelis.com',
        password: 'admin',
        firstName: 'Admin',
        lastName: 'Nexelis',
        phone: '06 06 06 06 06',
        civility: 'M',
        birthDate: faker.date.birthdate().toISOString(),
        acceptNewsletter: true,
        roles: JSON.stringify([Role.Admin]),
    },
];
